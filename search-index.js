var searchIndex = {};
searchIndex["assimp_sys"] = {"doc":"","items":[[3,"AiVectorKey","assimp_sys","",null,null],[12,"time","","",0,null],[12,"value","","",0,null],[3,"AiQuatKey","","",null,null],[12,"time","","",1,null],[12,"value","","",1,null],[3,"AiMeshKey","","",null,null],[12,"time","","",2,null],[12,"value","","",2,null],[3,"AiMeshMorphKey","","",null,null],[12,"time","","",3,null],[12,"values","","",3,null],[12,"weights","","",3,null],[12,"num_values_and_weights","","",3,null],[3,"AiNodeAnim","","",null,null],[12,"node_name","","",4,null],[12,"num_position_keys","","",4,null],[12,"position_keys","","",4,null],[12,"num_rotation_keys","","",4,null],[12,"rotation_keys","","",4,null],[12,"num_scaling_keys","","",4,null],[12,"scaling_keys","","",4,null],[12,"pre_state","","",4,null],[12,"post_state","","",4,null],[3,"AiMeshAnim","","",null,null],[12,"name","","",5,null],[12,"num_keys","","",5,null],[12,"keys","","",5,null],[3,"AiMeshMorphAnim","","",null,null],[12,"name","","",6,null],[12,"num_keys","","",6,null],[12,"keys","","",6,null],[3,"AiAnimation","","",null,null],[12,"name","","",7,null],[12,"duration","","",7,null],[12,"ticks_per_second","","",7,null],[12,"num_channels","","",7,null],[12,"channels","","",7,null],[12,"num_mesh_channels","","",7,null],[12,"mesh_channels","","",7,null],[12,"num_morph_mesh_channels","","",7,null],[12,"morph_mesh_channels","","",7,null],[3,"AiCamera","","",null,null],[12,"name","","",8,null],[12,"position","","",8,null],[12,"up","","",8,null],[12,"look_at","","",8,null],[12,"horizontal_fov","","",8,null],[12,"clip_plane_near","","",8,null],[12,"clip_plane_far","","",8,null],[12,"aspect","","",8,null],[3,"AiExportFormatDesc","","",null,null],[12,"id","","",9,null],[12,"description","","",9,null],[12,"file_extension","","",9,null],[3,"AiExportDataBlob","","",null,null],[12,"size","","",10,null],[12,"data","","",10,null],[12,"name","","",10,null],[12,"next","","",10,null],[3,"AiFileIO","","",null,null],[12,"open_proc","","",11,null],[12,"close_proc","","",11,null],[12,"user_data","","",11,null],[3,"AiFile","","",null,null],[12,"read_proc","","",12,null],[12,"write_proc","","",12,null],[12,"tell_proc","","",12,null],[12,"file_size_proc","","",12,null],[12,"seek_proc","","",12,null],[12,"flush_proc","","",12,null],[12,"user_data","","",12,null],[3,"AiLogStream","","",null,null],[12,"callback","","",13,null],[12,"user","","",13,null],[3,"AiPropertyStore","","",null,null],[12,"sentinel","","",14,null],[3,"AiImporterFlags","","",null,null],[3,"AiImporterDesc","","",null,null],[12,"name","","",15,null],[12,"author","","",15,null],[12,"maintainer","","",15,null],[12,"comments","","",15,null],[12,"flags","","",15,null],[12,"min_major","","",15,null],[12,"min_minor","","",15,null],[12,"max_major","","",15,null],[12,"max_minor","","",15,null],[12,"file_extensions","","",15,null],[3,"AiLight","","",null,null],[12,"name","","",16,null],[12,"light_type","","",16,null],[12,"position","","",16,null],[12,"direction","","",16,null],[12,"up","","",16,null],[12,"attenuation_constant","","",16,null],[12,"attenuation_linear","","",16,null],[12,"attenuation_quadratic","","",16,null],[12,"color_diffuse","","",16,null],[12,"color_specular","","",16,null],[12,"color_ambient","","",16,null],[12,"angle_inner_cone","","",16,null],[12,"angle_outer_cone","","",16,null],[12,"size","","",16,null],[3,"AiTextureFlags","","",null,null],[3,"AiUVTransform","","",null,null],[12,"translation","","",17,null],[12,"scaling","","",17,null],[12,"rotation","","",17,null],[3,"AiMaterialProperty","","",null,null],[12,"key","","",18,null],[12,"semantic","","",18,null],[12,"index","","",18,null],[12,"data_length","","",18,null],[12,"property_type","","",18,null],[12,"data","","",18,null],[3,"AiMaterial","","",null,null],[12,"properties","","",19,null],[12,"num_properties","","",19,null],[12,"num_allocated","","",19,null],[3,"AiFace","","",null,null],[12,"num_indices","","",20,null],[12,"indices","","",20,null],[3,"AiVertexWeight","","",null,null],[12,"vertex_id","","",21,null],[12,"weight","","",21,null],[3,"AiBone","","",null,null],[12,"name","","",22,null],[12,"num_weights","","",22,null],[12,"weights","","",22,null],[12,"offset_matrix","","",22,null],[3,"AiPrimitiveType","","",null,null],[3,"AiAnimMesh","","",null,null],[12,"vertices","","",23,null],[12,"normals","","",23,null],[12,"tangents","","",23,null],[12,"bitangents","","",23,null],[12,"colors","","",23,null],[12,"texture_coords","","",23,null],[12,"num_vertices","","",23,null],[12,"weight","","",23,null],[3,"AiMesh","","",null,null],[12,"primitive_types","","",24,null],[12,"num_vertices","","",24,null],[12,"num_faces","","",24,null],[12,"vertices","","",24,null],[12,"normals","","",24,null],[12,"tangents","","",24,null],[12,"bitangents","","",24,null],[12,"colors","","",24,null],[12,"texture_coords","","",24,null],[12,"num_uv_components","","",24,null],[12,"faces","","",24,null],[12,"num_bones","","",24,null],[12,"bones","","",24,null],[12,"material_index","","",24,null],[12,"name","","",24,null],[12,"num_anim_meshes","","",24,null],[12,"anim_meshes","","",24,null],[12,"method","","",24,null],[3,"AiMetadataEntry","","",null,null],[12,"data_type","","",25,null],[12,"data","","",25,null],[3,"AiMetadata","","",null,null],[12,"num_properties","","",26,null],[12,"keys","","",26,null],[12,"values","","",26,null],[3,"AiPostProcessSteps","","",null,null],[3,"AiNode","","",null,null],[12,"name","","",27,null],[12,"transformation","","",27,null],[12,"parent","","",27,null],[12,"num_children","","",27,null],[12,"children","","",27,null],[12,"num_meshes","","",27,null],[12,"meshes","","",27,null],[12,"metadata","","",27,null],[3,"AiSceneFlags","","",null,null],[3,"AiScene","","",null,null],[12,"flags","","",28,null],[12,"root_node","","",28,null],[12,"num_meshes","","",28,null],[12,"meshes","","",28,null],[12,"num_materials","","",28,null],[12,"materials","","",28,null],[12,"num_animations","","",28,null],[12,"animations","","",28,null],[12,"num_textures","","",28,null],[12,"textures","","",28,null],[12,"num_lights","","",28,null],[12,"lights","","",28,null],[12,"num_cameras","","",28,null],[12,"cameras","","",28,null],[3,"AiTexel","","",null,null],[12,"b","","",29,null],[12,"g","","",29,null],[12,"r","","",29,null],[12,"a","","",29,null],[3,"AiTexture","","",null,null],[12,"width","","",30,null],[12,"height","","",30,null],[12,"format_hint","","",30,null],[12,"data","","",30,null],[3,"AiColor3D","","",null,null],[12,"r","","",31,null],[12,"g","","",31,null],[12,"b","","",31,null],[3,"AiColor4D","","",null,null],[12,"r","","",32,null],[12,"g","","",32,null],[12,"b","","",32,null],[12,"a","","",32,null],[3,"AiMatrix3x3","","",null,null],[12,"a1","","",33,null],[12,"a2","","",33,null],[12,"a3","","",33,null],[12,"b1","","",33,null],[12,"b2","","",33,null],[12,"b3","","",33,null],[12,"c1","","",33,null],[12,"c2","","",33,null],[12,"c3","","",33,null],[3,"AiMatrix4x4","","",null,null],[12,"a1","","",34,null],[12,"a2","","",34,null],[12,"a3","","",34,null],[12,"a4","","",34,null],[12,"b1","","",34,null],[12,"b2","","",34,null],[12,"b3","","",34,null],[12,"b4","","",34,null],[12,"c1","","",34,null],[12,"c2","","",34,null],[12,"c3","","",34,null],[12,"c4","","",34,null],[12,"d1","","",34,null],[12,"d2","","",34,null],[12,"d3","","",34,null],[12,"d4","","",34,null],[3,"AiQuaternion","","",null,null],[12,"w","","",35,null],[12,"x","","",35,null],[12,"y","","",35,null],[12,"z","","",35,null],[3,"AiString","","",null,null],[12,"length","","",36,null],[12,"data","","",36,null],[3,"AiVector2D","","",null,null],[12,"x","","",37,null],[12,"y","","",37,null],[3,"AiVector3D","","",null,null],[12,"x","","",38,null],[12,"y","","",38,null],[12,"z","","",38,null],[3,"AiPlane","","",null,null],[12,"a","","",39,null],[12,"b","","",39,null],[12,"c","","",39,null],[12,"d","","",39,null],[3,"AiRay","","",null,null],[12,"pos","","",40,null],[12,"dir","","",40,null],[3,"AiMemoryInfo","","",null,null],[12,"textures","","",41,null],[12,"materials","","",41,null],[12,"meshes","","",41,null],[12,"nodes","","",41,null],[12,"animations","","",41,null],[12,"cameras","","",41,null],[12,"lights","","",41,null],[12,"total","","",41,null],[3,"AiCompileFlags","","",null,null],[4,"AiAnimBehaviour","","",null,null],[13,"Default","","",42,null],[13,"Constant","","",42,null],[13,"Linear","","",42,null],[13,"Repeat","","",42,null],[4,"AiLightSourceType","","",null,null],[13,"Undefined","","",43,null],[13,"Directional","","",43,null],[13,"Point","","",43,null],[13,"Spot","","",43,null],[13,"Ambient","","",43,null],[13,"Area","","",43,null],[4,"AiTextureOp","","",null,null],[13,"Multiply","","",44,null],[13,"Add","","",44,null],[13,"Subtract","","",44,null],[13,"Divide","","",44,null],[13,"SmoothAdd","","",44,null],[13,"SignedAdd","","",44,null],[4,"AiTextureMapMode","","",null,null],[13,"Wrap","","",45,null],[13,"Clamp","","",45,null],[13,"Mirror","","",45,null],[13,"Decal","","",45,null],[4,"AiTextureMapping","","",null,null],[13,"UV","","",46,null],[13,"Sphere","","",46,null],[13,"Cylinder","","",46,null],[13,"Box","","",46,null],[13,"Plane","","",46,null],[13,"Other","","",46,null],[4,"AiTextureType","","",null,null],[13,"None","","",47,null],[13,"Diffuse","","",47,null],[13,"Specular","","",47,null],[13,"Ambient","","",47,null],[13,"Emissive","","",47,null],[13,"Height","","",47,null],[13,"Normals","","",47,null],[13,"Shininess","","",47,null],[13,"Opacity","","",47,null],[13,"Displacement","","",47,null],[13,"Lightmap","","",47,null],[13,"Reflection","","",47,null],[13,"Unknown","","",47,null],[4,"AiShadingMode","","",null,null],[13,"Flat","","",48,null],[13,"Gouraud","","",48,null],[13,"Phong","","",48,null],[13,"Blinn","","",48,null],[13,"Toon","","",48,null],[13,"OrenNayar","","",48,null],[13,"Minnaert","","",48,null],[13,"CookTorrance","","",48,null],[13,"NoShading","","",48,null],[13,"Fresnel","","",48,null],[4,"AiBlendMode","","",null,null],[13,"Default","","",49,null],[13,"Additive","","",49,null],[4,"AiPropertyTypeInfo","","",null,null],[13,"Float","","",50,null],[13,"Double","","",50,null],[13,"String","","",50,null],[13,"Integer","","",50,null],[13,"Buffer","","",50,null],[4,"AiMorphingMethod","","",null,null],[13,"VertexBlend","","",51,null],[13,"MorphNormalized","","",51,null],[13,"MorphRelative","","",51,null],[4,"AiMetadataType","","",null,null],[13,"Bool","","",52,null],[13,"Int32","","",52,null],[13,"Uint64","","",52,null],[13,"Float","","",52,null],[13,"Double","","",52,null],[13,"AiString","","",52,null],[13,"AiVector3D","","",52,null],[4,"AiReturn","","",null,null],[13,"Success","","",53,null],[13,"Failure","","",53,null],[13,"OutOfMemory","","",53,null],[4,"AiOrigin","","",null,null],[13,"Set","","",54,null],[13,"Cur","","",54,null],[13,"End","","",54,null],[4,"AiDefaultLogStream","","",null,null],[13,"File","","",55,null],[13,"StdOut","","",55,null],[13,"StdErr","","",55,null],[13,"Debugger","","",55,null],[5,"aiGetExportFormatCount","","",null,null],[5,"aiGetExportFormatDescription","","",null,null],[5,"aiReleaseExportFormatDescription","","",null,null],[5,"aiCopyScene","","",null,null],[5,"aiFreeScene","","",null,null],[5,"aiExportScene","","",null,null],[5,"aiExportSceneEx","","",null,null],[5,"aiExportSceneToBlob","","",null,null],[5,"aiReleaseExportBlob","","",null,null],[5,"aiImportFile","","",null,null],[5,"aiImportFileEx","","",null,null],[5,"aiImportFileExWithProperties","","",null,null],[5,"aiImportFileFromMemory","","",null,null],[5,"aiImportFileFromMemoryWithProperties","","",null,null],[5,"aiApplyPostProcessing","","",null,null],[5,"aiGetPredefinedLogStream","","",null,null],[5,"aiAttachLogStream","","",null,null],[5,"aiEnableVerboseLogging","","",null,null],[5,"aiDetachLogStream","","",null,null],[5,"aiDetachAllLogStreams","","",null,null],[5,"aiReleaseImport","","",null,null],[5,"aiGetErrorString","","",null,null],[5,"aiIsExtensionSupported","","",null,null],[5,"aiGetExtensionList","","",null,null],[5,"aiGetMemoryRequirements","","",null,null],[5,"aiCreatePropertyStore","","",null,null],[5,"aiReleasePropertyStore","","",null,null],[5,"aiSetImportPropertyInteger","","",null,null],[5,"aiSetImportPropertyFloat","","",null,null],[5,"aiSetImportPropertyString","","",null,null],[5,"aiSetImportPropertyMatrix","","",null,null],[5,"aiCreateQuaternionFromMatrix","","",null,null],[5,"aiDecomposeMatrix","","",null,null],[5,"aiTransposeMatrix4","","",null,null],[5,"aiTransposeMatrix3","","",null,null],[5,"aiTransformVecByMatrix3","","",null,null],[5,"aiTransformVecByMatrix4","","",null,null],[5,"aiMultiplyMatrix4","","",null,null],[5,"aiMultiplyMatrix3","","",null,null],[5,"aiIdentityMatrix3","","",null,null],[5,"aiIdentityMatrix4","","",null,null],[5,"aiGetImportFormatCount","","",null,null],[5,"aiGetImportFormatDescription","","",null,null],[5,"aiGetImporterDesc","","",null,null],[5,"aiGetMaterialProperty","","",null,null],[5,"aiGetMaterialFloatArray","","",null,null],[5,"aiGetMaterialIntegerArray","","",null,null],[5,"aiGetMaterialColor","","",null,null],[5,"aiGetMaterialUVTransform","","",null,null],[5,"aiGetMaterialString","","",null,null],[5,"aiGetMaterialTextureCount","","",null,null],[5,"aiGetMaterialTexture","","",null,null],[5,"aiGetLegalString","","",null,null],[5,"aiGetVersionMinor","","",null,null],[5,"aiGetVersionMajor","","",null,null],[5,"aiGetVersionRevision","","",null,null],[5,"aiGetCompileFlags","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"aivectorkey"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"aiquatkey"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"aimeshkey"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"aimeshmorphkey"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"aianimbehaviour"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"aianimbehaviour"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"aicamera"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"aipropertystore"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"config","","",null,null],[3,"AiComponent","assimp_sys::config","",null,null],[3,"AiUVTransformFlags","","",null,null],[17,"AI_SBBC_DEFAULT_MAX_BONES","","",null,null],[17,"AI_SLM_DEFAULT_MAX_TRIANGLES","","",null,null],[17,"AI_SLM_DEFAULT_MAX_VERTICES","","",null,null],[17,"AI_LMW_MAX_WEIGHTS","","",null,null],[17,"AI_DEBONE_THRESHOLD","","",null,null],[17,"PP_ICL_DEFAULT_PTCACHE_SIZE","","",null,null],[17,"GLOB_MEASURE_TIME","","",null,null],[17,"IMPORT_NO_SKELETON_MESHES","","",null,null],[17,"GLOB_MULTITHREADING","","",null,null],[17,"PP_SBBC_MAX_BONES","","",null,null],[17,"PP_CT_MAX_SMOOTHING_ANGLE","","",null,null],[17,"PP_CT_TEXTURE_CHANNEL_INDEX","","",null,null],[17,"PP_GSN_MAX_SMOOTHING_ANGLE","","",null,null],[17,"IMPORT_MDL_COLORMAP","","",null,null],[17,"PP_RRM_EXCLUDE_LIST","","",null,null],[17,"PP_PTV_KEEP_HIERARCHY","","",null,null],[17,"PP_PTV_NORMALIZE","","",null,null],[17,"PP_PTV_ADD_ROOT_TRANSFORMATION","","",null,null],[17,"PP_PTV_ROOT_TRANSFORMATION","","",null,null],[17,"PP_FD_REMOVE","","",null,null],[17,"PP_OG_EXCLUDE_LIST","","",null,null],[17,"PP_SLM_TRIANGLE_LIMIT","","",null,null],[17,"PP_SLM_VERTEX_LIMIT","","",null,null],[17,"PP_LBW_MAX_WEIGHTS","","",null,null],[17,"PP_DB_THRESHOLD","","",null,null],[17,"PP_DB_ALL_OR_NONE","","",null,null],[17,"PP_ICL_PTCACHE_SIZE","","",null,null],[17,"PP_RVC_FLAGS","","",null,null],[17,"PP_SBP_REMOVE","","",null,null],[17,"PP_FID_ANIM_ACCURACY","","",null,null],[17,"PP_TUV_EVALUATE","","",null,null],[17,"FAVOUR_SPEED","","",null,null],[17,"IMPORT_FBX_READ_ALL_GEOMETRY_LAYERS","","",null,null],[17,"IMPORT_FBX_READ_ALL_MATERIALS","","",null,null],[17,"IMPORT_FBX_READ_MATERIALS","","",null,null],[17,"IMPORT_FBX_READ_TEXTURES","","",null,null],[17,"IMPORT_FBX_READ_CAMERAS","","",null,null],[17,"IMPORT_FBX_READ_LIGHTS","","",null,null],[17,"IMPORT_FBX_READ_ANIMATIONS","","",null,null],[17,"IMPORT_FBX_STRICT_MODE","","",null,null],[17,"IMPORT_FBX_PRESERVE_PIVOTS","","",null,null],[17,"IMPORT_FBX_OPTIMIZE_EMPTY_ANIMATION_CURVES","","",null,null],[17,"IMPORT_GLOBAL_KEYFRAME","","",null,null],[17,"IMPORT_MD3_KEYFRAME","","",null,null],[17,"IMPORT_MD2_KEYFRAME","","",null,null],[17,"IMPORT_MDL_KEYFRAME","","",null,null],[17,"IMPORT_MDC_KEYFRAME","","",null,null],[17,"IMPORT_SMD_KEYFRAME","","",null,null],[17,"IMPORT_UNREAL_KEYFRAME","","",null,null],[17,"IMPORT_AC_SEPARATE_BFCULL","","",null,null],[17,"IMPORT_AC_EVAL_SUBDIVISION","","",null,null],[17,"UNREAL_HANDLE_FLAGS","","",null,null],[17,"IMPORT_TER_MAKE_UVS","","",null,null],[17,"IMPORT_ASE_RECONSTRUCT_NORMALS","","",null,null],[17,"IMPORT_MD3_HANDLE_MULTIPART","","",null,null],[17,"IMPORT_MD3_SKIN_NAME","","",null,null],[17,"IMPORT_MD3_SHADER_SRC","","",null,null],[17,"IMPORT_LWO_ONE_LAYER_ONLY","","",null,null],[17,"IMPORT_MD5_NO_ANIM_AUTOLOAD","","",null,null],[17,"IMPORT_LWS_ANIM_START","","",null,null],[17,"IMPORT_LWS_ANIM_END","","",null,null],[17,"IMPORT_IRR_ANIM_FPS","","",null,null],[17,"IMPORT_OGRE_MATERIAL_FILE","","",null,null],[17,"IMPORT_OGRE_TEXTURETYPE_FROM_FILENAME","","",null,null],[17,"IMPORT_IFC_SKIP_SPACE_REPRESENTATIONS","","",null,null],[17,"IMPORT_IFC_SKIP_CURVE_REPRESENTATIONS","","",null,null],[17,"IMPORT_IFC_CUSTOM_TRIANGULATION","","",null,null],[17,"IMPORT_COLLADA_IGNORE_UP_DIRECTION","","",null,null],[17,"IMPORT_COLLADA_INVERT_TRANSPARENCY","","",null,null],[17,"EXPORT_XFILE_64BIT","","",null,null],[17,"AICOMPONENT_NORMALS","","",null,null],[17,"AICOMPONENT_TANGENTS_AND_BITANGENTS","","",null,null],[17,"AICOMPONENT_COLORS","","",null,null],[17,"AICOMPONENT_TEXCOORDS","","",null,null],[17,"AICOMPONENT_BONE_WEIGHTS","","",null,null],[17,"AICOMPONENT_ANIMATIONS","","",null,null],[17,"AICOMPONENT_TEXTURES","","",null,null],[17,"AICOMPONENT_LIGHTS","","",null,null],[17,"AICOMPONENT_CAMERAS","","",null,null],[17,"AICOMPONENT_MESHES","","",null,null],[17,"AICOMPONENT_MATERIALS","","",null,null],[17,"AI_UVTRAFO_SCALING","","",null,null],[17,"AI_UVTRAFO_ROTATION","","",null,null],[17,"AI_UVTRAFO_TRANSLATION","","",null,null],[17,"AI_UVTRAFO_ALL","","",null,null],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"aicomponent"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",56,{"inputs":[],"output":{"name":"aicomponent"}}],[11,"all","","Returns the set containing all flags.",56,{"inputs":[],"output":{"name":"aicomponent"}}],[11,"bits","","Returns the raw value of the flags currently stored.",56,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",56,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",56,{"inputs":[{"name":"c_uint"}],"output":{"name":"aicomponent"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"bitor_assign","","Adds the set of flags.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"bitxor_assign","","Toggles the set of flags.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"sub_assign","","Disables all flags enabled in the set.",56,{"inputs":[{"name":"self"},{"name":"aicomponent"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",56,{"inputs":[{"name":"self"}],"output":{"name":"aicomponent"}}],[11,"extend","","",56,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",56,{"inputs":[{"name":"t"}],"output":{"name":"aicomponent"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"aiuvtransformflags"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"ordering"}}],[11,"hash","","",57,null],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",57,{"inputs":[],"output":{"name":"aiuvtransformflags"}}],[11,"all","","Returns the set containing all flags.",57,{"inputs":[],"output":{"name":"aiuvtransformflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",57,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",57,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",57,{"inputs":[{"name":"c_uint"}],"output":{"name":"aiuvtransformflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"bitor_assign","","Adds the set of flags.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",57,{"inputs":[{"name":"self"},{"name":"aiuvtransformflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",57,{"inputs":[{"name":"self"}],"output":{"name":"aiuvtransformflags"}}],[11,"extend","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",57,{"inputs":[{"name":"t"}],"output":{"name":"aiuvtransformflags"}}],[11,"eq","assimp_sys","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"aiimporterflags"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"option"}}],[11,"lt","","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"le","","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"gt","","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"ge","","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"cmp","","",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"ordering"}}],[11,"hash","","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",58,{"inputs":[],"output":{"name":"aiimporterflags"}}],[11,"all","","Returns the set containing all flags.",58,{"inputs":[],"output":{"name":"aiimporterflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",58,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",58,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",58,{"inputs":[{"name":"c_uint"}],"output":{"name":"aiimporterflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"bitor_assign","","Adds the set of flags.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",58,{"inputs":[{"name":"self"},{"name":"aiimporterflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",58,{"inputs":[{"name":"self"}],"output":{"name":"aiimporterflags"}}],[11,"extend","","",58,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",58,{"inputs":[{"name":"t"}],"output":{"name":"aiimporterflags"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"ailightsourcetype"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"ailightsourcetype"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"ailight"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"aitextureop"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"aitextureop"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"aitexturemapmode"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"aitexturemapmode"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"aitexturemapping"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"aitexturemapping"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"aitexturetype"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"aitexturetype"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"aishadingmode"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"aishadingmode"}],"output":{"name":"bool"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"aitextureflags"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"option"}}],[11,"lt","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"le","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"gt","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"ge","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"ordering"}}],[11,"hash","","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",59,{"inputs":[],"output":{"name":"aitextureflags"}}],[11,"all","","Returns the set containing all flags.",59,{"inputs":[],"output":{"name":"aitextureflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",59,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",59,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",59,{"inputs":[{"name":"c_uint"}],"output":{"name":"aitextureflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"bitor_assign","","Adds the set of flags.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",59,{"inputs":[{"name":"self"},{"name":"aitextureflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",59,{"inputs":[{"name":"self"}],"output":{"name":"aitextureflags"}}],[11,"extend","","",59,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",59,{"inputs":[{"name":"t"}],"output":{"name":"aitextureflags"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"aiblendmode"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"aiblendmode"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"aiuvtransform"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"aipropertytypeinfo"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"aipropertytypeinfo"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"aivertexweight"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"aiprimitivetype"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"option"}}],[11,"lt","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"le","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"gt","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"ge","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"cmp","","",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"ordering"}}],[11,"hash","","",60,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",60,{"inputs":[],"output":{"name":"aiprimitivetype"}}],[11,"all","","Returns the set containing all flags.",60,{"inputs":[],"output":{"name":"aiprimitivetype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",60,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",60,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",60,{"inputs":[{"name":"c_uint"}],"output":{"name":"aiprimitivetype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"bitor_assign","","Adds the set of flags.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"bitxor_assign","","Toggles the set of flags.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"sub_assign","","Disables all flags enabled in the set.",60,{"inputs":[{"name":"self"},{"name":"aiprimitivetype"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",60,{"inputs":[{"name":"self"}],"output":{"name":"aiprimitivetype"}}],[11,"extend","","",60,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",60,{"inputs":[{"name":"t"}],"output":{"name":"aiprimitivetype"}}],[11,"has_positions","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_normals","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_tangents_and_bitangents","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_vertex_colors","","",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"has_texture_coords","","",23,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"aimorphingmethod"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"aimorphingmethod"}],"output":{"name":"bool"}}],[11,"has_positions","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_faces","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_normals","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_tangents_and_bitangents","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_vertex_colors","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"has_texture_coords","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_num_uv_channels","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_num_color_channels","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_bones","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"aimetadatatype"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"aimetadatatype"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"aipostprocesssteps"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"cmp","","",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"ordering"}}],[11,"hash","","",61,null],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",61,{"inputs":[],"output":{"name":"aipostprocesssteps"}}],[11,"all","","Returns the set containing all flags.",61,{"inputs":[],"output":{"name":"aipostprocesssteps"}}],[11,"bits","","Returns the raw value of the flags currently stored.",61,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",61,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",61,{"inputs":[{"name":"c_uint"}],"output":{"name":"aipostprocesssteps"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"bitor_assign","","Adds the set of flags.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"bitxor_assign","","Toggles the set of flags.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"sub_assign","","Disables all flags enabled in the set.",61,{"inputs":[{"name":"self"},{"name":"aipostprocesssteps"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",61,{"inputs":[{"name":"self"}],"output":{"name":"aipostprocesssteps"}}],[11,"extend","","",61,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",61,{"inputs":[{"name":"t"}],"output":{"name":"aipostprocesssteps"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"aisceneflags"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"option"}}],[11,"lt","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"le","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"gt","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"ge","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"cmp","","",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"ordering"}}],[11,"hash","","",62,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",62,{"inputs":[],"output":{"name":"aisceneflags"}}],[11,"all","","Returns the set containing all flags.",62,{"inputs":[],"output":{"name":"aisceneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",62,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",62,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",62,{"inputs":[{"name":"c_uint"}],"output":{"name":"aisceneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"bitor_assign","","Adds the set of flags.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",62,{"inputs":[{"name":"self"},{"name":"aisceneflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",62,{"inputs":[{"name":"self"}],"output":{"name":"aisceneflags"}}],[11,"extend","","",62,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",62,{"inputs":[{"name":"t"}],"output":{"name":"aisceneflags"}}],[11,"has_meshes","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_materials","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_lights","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_textures","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_cameras","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_animations","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"aitexel"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"aitexel"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"aitexel"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"aicolor3d"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"aicolor3d"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"aicolor3d"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"aicolor4d"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"aicolor4d"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"aicolor4d"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"aimatrix3x3"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"aimatrix3x3"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"aimatrix3x3"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"aimatrix4x4"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"aimatrix4x4"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"aimatrix4x4"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"aiquaternion"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"aiquaternion"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"aiquaternion"}],"output":{"name":"bool"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"aistring"}}],[11,"as_ref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",36,{"inputs":[{"name":"str"}],"output":{"name":"aistring"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"aistring"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"aistring"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"aivector2d"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"aivector2d"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"aivector2d"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"aivector3d"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"aivector3d"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"aivector3d"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"aiplane"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"aiplane"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"aiplane"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"airay"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"airay"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"airay"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"aireturn"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"aireturn"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"aiorigin"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"aiorigin"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"aidefaultlogstream"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"aidefaultlogstream"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"aimemoryinfo"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"aimemoryinfo"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"aicompileflags"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"option"}}],[11,"lt","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"le","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"gt","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"ge","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"cmp","","",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"ordering"}}],[11,"hash","","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",63,{"inputs":[],"output":{"name":"aicompileflags"}}],[11,"all","","Returns the set containing all flags.",63,{"inputs":[],"output":{"name":"aicompileflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",63,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",63,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",63,{"inputs":[{"name":"c_uint"}],"output":{"name":"aicompileflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"bitor_assign","","Adds the set of flags.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",63,{"inputs":[{"name":"self"},{"name":"aicompileflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",63,{"inputs":[{"name":"self"}],"output":{"name":"aicompileflags"}}],[11,"extend","","",63,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",63,{"inputs":[{"name":"t"}],"output":{"name":"aicompileflags"}}],[6,"AiFileWriteProc","","",null,null],[6,"AiFileReadProc","","",null,null],[6,"AiFileTellProc","","",null,null],[6,"AiFileFlushProc","","",null,null],[6,"AiFileSeek","","",null,null],[6,"AiFileOpenProc","","",null,null],[6,"AiFileCloseProc","","",null,null],[6,"AiUserData","","",null,null],[6,"AiLogStreamCallback","","",null,null],[6,"AiBool","","",null,null],[7,"AI_DEFAULT_MATERIAL_NAME","","",null,null],[17,"AI_FALSE","","",null,null],[17,"AI_TRUE","","",null,null],[17,"AIIMPORTERFLAG_SUPPORT_TEXT_FLAVOUR","","",null,null],[17,"AIIMPORTERFLAG_SUPPORT_BINARY_FLAVOUR","","",null,null],[17,"AIIMPORTERFLAG_SUPPORT_COMPRESSED_FLAVOUR","","",null,null],[17,"AIIMPORTERFLAG_LIMITED_SUPPORT","","",null,null],[17,"AIIMPORTERFLAG_EXPERIMENTAL","","",null,null],[17,"AITEXTUREFLAG_INVERT","","",null,null],[17,"AITEXTUREFLAG_USE_ALPHA","","",null,null],[17,"AITEXTUREFLAG_IGNORE_ALPHA","","",null,null],[17,"AI_MAX_FACE_INDICES","","",null,null],[17,"AI_MAX_BONE_WEIGHTS","","",null,null],[17,"AI_MAX_VERTICES","","",null,null],[17,"AI_MAX_FACES","","",null,null],[17,"AI_MAX_NUMBER_OF_COLOR_SETS","","",null,null],[17,"AI_MAX_NUMBER_OF_TEXTURECOORDS","","",null,null],[17,"AIPRIMITIVETYPE_POINT","","",null,null],[17,"AIPRIMITIVETYPE_LINE","","",null,null],[17,"AIPRIMITIVETYPE_TRIANGLE","","",null,null],[17,"AIPRIMITIVETYPE_POLYGON","","",null,null],[17,"AIPROCESS_CALC_TANGENT_SPACE","","",null,null],[17,"AIPROCESS_JOIN_IDENTICAL_VERTICES","","",null,null],[17,"AIPROCESS_MAKE_LEFT_HANDED","","",null,null],[17,"AIPROCESS_TRIANGULATE","","",null,null],[17,"AIPROCESS_REMOVE_COMPONENT","","",null,null],[17,"AIPROCESS_GEN_NORMALS","","",null,null],[17,"AIPROCESS_GEN_SMOOTH_NORMALS","","",null,null],[17,"AIPROCESS_SPLIT_LARGE_MESHES","","",null,null],[17,"AIPROCESS_PRE_TRANSFORM_VERTICES","","",null,null],[17,"AIPROCESS_LIMIT_BONE_WEIGHTS","","",null,null],[17,"AIPROCESS_VALIDATE_DATA_STRUCTURE","","",null,null],[17,"AIPROCESS_IMPROVE_CACHE_LOCALITY","","",null,null],[17,"AIPROCESS_REMOVE_REDUNDANT_MATERIALS","","",null,null],[17,"AIPROCESS_FIX_INFACING_NORMALS","","",null,null],[17,"AIPROCESS_SORT_BY_PTYPE","","",null,null],[17,"AIPROCESS_FIND_DEGENERATES","","",null,null],[17,"AIPROCESS_FIND_INVALID_DATA","","",null,null],[17,"AIPROCESS_GEN_UV_COORDS","","",null,null],[17,"AIPROCESS_TRANSFORM_UV_COORDS","","",null,null],[17,"AIPROCESS_FIND_INSTANCES","","",null,null],[17,"AIPROCESS_OPTIMIZE_MESHES","","",null,null],[17,"AIPROCESS_OPTIMIZE_GRAPH","","",null,null],[17,"AIPROCESS_FLIP_UVS","","",null,null],[17,"AIPROCESS_FLIP_WINDING_ORDER","","",null,null],[17,"AIPROCESS_SPLIT_BY_BONE_COUNT","","",null,null],[17,"AIPROCESS_DEBONE","","",null,null],[17,"AIPROCESS_CONVERT_TO_LEFT_HANDED","","",null,null],[17,"AIPROCESS_TARGET_REALTIME_FAST","","",null,null],[17,"AIPROCESS_TARGET_REALTIME_QUALITY","","",null,null],[17,"AIPROCESS_TARGET_REALTIME_MAX_QUALITY","","",null,null],[17,"AI_SCENE_FLAGS_INCOMPLETE","","",null,null],[17,"AI_SCENE_FLAGS_VALIDATED","","",null,null],[17,"AI_SCENE_FLAGS_VALIDATION_WARNING","","",null,null],[17,"AI_SCENE_FLAGS_NON_VERBOSE_FORMAT","","",null,null],[17,"AI_SCENE_FLAGS_TERRAIN","","",null,null],[17,"AI_SCENE_FLAGS_ALLOW_SHARED","","",null,null],[17,"MAXLEN","","",null,null],[17,"ASSIMP_CFLAGS_SHARED","","",null,null],[17,"ASSIMP_CFLAGS_STLPORT","","",null,null],[17,"ASSIMP_CFLAGS_DEBUG","","",null,null],[17,"ASSIMP_CFLAGS_NOBOOST","","",null,null],[17,"ASSIMP_CFLAGS_SINGLETHREADED","","",null,null]],"paths":[[3,"AiVectorKey"],[3,"AiQuatKey"],[3,"AiMeshKey"],[3,"AiMeshMorphKey"],[3,"AiNodeAnim"],[3,"AiMeshAnim"],[3,"AiMeshMorphAnim"],[3,"AiAnimation"],[3,"AiCamera"],[3,"AiExportFormatDesc"],[3,"AiExportDataBlob"],[3,"AiFileIO"],[3,"AiFile"],[3,"AiLogStream"],[3,"AiPropertyStore"],[3,"AiImporterDesc"],[3,"AiLight"],[3,"AiUVTransform"],[3,"AiMaterialProperty"],[3,"AiMaterial"],[3,"AiFace"],[3,"AiVertexWeight"],[3,"AiBone"],[3,"AiAnimMesh"],[3,"AiMesh"],[3,"AiMetadataEntry"],[3,"AiMetadata"],[3,"AiNode"],[3,"AiScene"],[3,"AiTexel"],[3,"AiTexture"],[3,"AiColor3D"],[3,"AiColor4D"],[3,"AiMatrix3x3"],[3,"AiMatrix4x4"],[3,"AiQuaternion"],[3,"AiString"],[3,"AiVector2D"],[3,"AiVector3D"],[3,"AiPlane"],[3,"AiRay"],[3,"AiMemoryInfo"],[4,"AiAnimBehaviour"],[4,"AiLightSourceType"],[4,"AiTextureOp"],[4,"AiTextureMapMode"],[4,"AiTextureMapping"],[4,"AiTextureType"],[4,"AiShadingMode"],[4,"AiBlendMode"],[4,"AiPropertyTypeInfo"],[4,"AiMorphingMethod"],[4,"AiMetadataType"],[4,"AiReturn"],[4,"AiOrigin"],[4,"AiDefaultLogStream"],[3,"AiComponent"],[3,"AiUVTransformFlags"],[3,"AiImporterFlags"],[3,"AiTextureFlags"],[3,"AiPrimitiveType"],[3,"AiPostProcessSteps"],[3,"AiSceneFlags"],[3,"AiCompileFlags"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[17,"FLAG_A","","",null,null],[17,"FLAG_B","","",null,null],[17,"FLAG_C","","",null,null],[17,"FLAG_ABC","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
initSearch(searchIndex);
